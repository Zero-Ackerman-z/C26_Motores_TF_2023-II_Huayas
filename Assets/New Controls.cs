//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @NewControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @NewControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""Battle"",
            ""id"": ""ac962f40-e511-4df6-a21f-212090858a6e"",
            ""actions"": [
                {
                    ""name"": ""Atack"",
                    ""type"": ""Button"",
                    ""id"": ""aacb436c-2dca-4117-868a-908fd710c1fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e9130fb-4eab-4e66-bb57-5426178e394e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8514a1f-b4cc-4a3a-91fc-a1a296ff4092"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Exploration"",
            ""id"": ""1daf6ac7-e12a-4604-b7e8-8e314f227478"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""05063100-3a43-4d40-9a21-f21d500a6fbd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interactuar"",
                    ""type"": ""Button"",
                    ""id"": ""b3382b2d-704f-4f23-b34c-e6cf8950c430"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""ea4461bb-4dc9-40b8-a032-3fdd682ff50b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""734920df-e86d-41a8-9b1f-3a14ce188092"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""124d83c1-1f3e-48eb-9f87-26cf20109166"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8d7ef033-537d-4e21-85a3-fa277ef0139c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""eab1c804-aeb3-4aae-8757-42f3325885ad"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6bd524f7-d030-455e-945a-4259eaf2e8ee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a9448fd-3a50-43c9-939e-bf52ee1bd283"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Flechas"",
                    ""id"": ""b3dbf784-51a8-4e28-a540-5f2e00990cc8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9e03320b-9750-4cea-ad63-54279d2cb07d"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6fb8bbb1-619f-448d-8709-7b1611ecf745"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b0e3fd49-a1d5-4d0f-b25e-9f390fc43f4c"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""95bb1002-fa78-4e36-aa8d-2d1cbf081501"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Cruzseta"",
                    ""id"": ""82511c50-3fec-4012-af35-94df86910d2e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""640f6bdc-f7ec-4dbf-8a49-a79e56407ab5"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""04909866-5799-44f2-adf3-18e239d30602"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""94bc521b-3de5-4532-8a6f-bc8084579c94"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2d5b6cc1-66ea-443e-8f65-09c34e81aedd"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d71f09f3-b4c6-4c44-a29f-09f1fff3c390"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interactuar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""082d6ba6-51b7-43cb-8273-52fa501005c7"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Sigilo"",
            ""id"": ""8531f7a4-47e8-4a8a-8ce1-d4b6f0f1ea3e"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""784f96d1-4d7b-4f0a-8acd-f54452b6825d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a18b09c4-f23b-47bf-9b02-35d298f8ea55"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Battle
        m_Battle = asset.FindActionMap("Battle", throwIfNotFound: true);
        m_Battle_Atack = m_Battle.FindAction("Atack", throwIfNotFound: true);
        // Exploration
        m_Exploration = asset.FindActionMap("Exploration", throwIfNotFound: true);
        m_Exploration_Move = m_Exploration.FindAction("Move", throwIfNotFound: true);
        m_Exploration_Interactuar = m_Exploration.FindAction("Interactuar", throwIfNotFound: true);
        m_Exploration_Run = m_Exploration.FindAction("Run", throwIfNotFound: true);
        // Sigilo
        m_Sigilo = asset.FindActionMap("Sigilo", throwIfNotFound: true);
        m_Sigilo_Newaction = m_Sigilo.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Battle
    private readonly InputActionMap m_Battle;
    private List<IBattleActions> m_BattleActionsCallbackInterfaces = new List<IBattleActions>();
    private readonly InputAction m_Battle_Atack;
    public struct BattleActions
    {
        private @NewControls m_Wrapper;
        public BattleActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Atack => m_Wrapper.m_Battle_Atack;
        public InputActionMap Get() { return m_Wrapper.m_Battle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BattleActions set) { return set.Get(); }
        public void AddCallbacks(IBattleActions instance)
        {
            if (instance == null || m_Wrapper.m_BattleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BattleActionsCallbackInterfaces.Add(instance);
            @Atack.started += instance.OnAtack;
            @Atack.performed += instance.OnAtack;
            @Atack.canceled += instance.OnAtack;
        }

        private void UnregisterCallbacks(IBattleActions instance)
        {
            @Atack.started -= instance.OnAtack;
            @Atack.performed -= instance.OnAtack;
            @Atack.canceled -= instance.OnAtack;
        }

        public void RemoveCallbacks(IBattleActions instance)
        {
            if (m_Wrapper.m_BattleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBattleActions instance)
        {
            foreach (var item in m_Wrapper.m_BattleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BattleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BattleActions @Battle => new BattleActions(this);

    // Exploration
    private readonly InputActionMap m_Exploration;
    private List<IExplorationActions> m_ExplorationActionsCallbackInterfaces = new List<IExplorationActions>();
    private readonly InputAction m_Exploration_Move;
    private readonly InputAction m_Exploration_Interactuar;
    private readonly InputAction m_Exploration_Run;
    public struct ExplorationActions
    {
        private @NewControls m_Wrapper;
        public ExplorationActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Exploration_Move;
        public InputAction @Interactuar => m_Wrapper.m_Exploration_Interactuar;
        public InputAction @Run => m_Wrapper.m_Exploration_Run;
        public InputActionMap Get() { return m_Wrapper.m_Exploration; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ExplorationActions set) { return set.Get(); }
        public void AddCallbacks(IExplorationActions instance)
        {
            if (instance == null || m_Wrapper.m_ExplorationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ExplorationActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interactuar.started += instance.OnInteractuar;
            @Interactuar.performed += instance.OnInteractuar;
            @Interactuar.canceled += instance.OnInteractuar;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
        }

        private void UnregisterCallbacks(IExplorationActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interactuar.started -= instance.OnInteractuar;
            @Interactuar.performed -= instance.OnInteractuar;
            @Interactuar.canceled -= instance.OnInteractuar;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
        }

        public void RemoveCallbacks(IExplorationActions instance)
        {
            if (m_Wrapper.m_ExplorationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IExplorationActions instance)
        {
            foreach (var item in m_Wrapper.m_ExplorationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ExplorationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ExplorationActions @Exploration => new ExplorationActions(this);

    // Sigilo
    private readonly InputActionMap m_Sigilo;
    private List<ISigiloActions> m_SigiloActionsCallbackInterfaces = new List<ISigiloActions>();
    private readonly InputAction m_Sigilo_Newaction;
    public struct SigiloActions
    {
        private @NewControls m_Wrapper;
        public SigiloActions(@NewControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Sigilo_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Sigilo; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SigiloActions set) { return set.Get(); }
        public void AddCallbacks(ISigiloActions instance)
        {
            if (instance == null || m_Wrapper.m_SigiloActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SigiloActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(ISigiloActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(ISigiloActions instance)
        {
            if (m_Wrapper.m_SigiloActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISigiloActions instance)
        {
            foreach (var item in m_Wrapper.m_SigiloActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SigiloActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SigiloActions @Sigilo => new SigiloActions(this);
    public interface IBattleActions
    {
        void OnAtack(InputAction.CallbackContext context);
    }
    public interface IExplorationActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteractuar(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
    }
    public interface ISigiloActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
